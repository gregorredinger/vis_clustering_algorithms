.view1 {
  display: grid; /* enable grid for view1 items (the three graphs) */
  grid-template-columns: auto auto; /* number of columns and size*/
  grid-template-rows: 55vh 30vh; /* height of the rows, every entry is a new row line e.g. 1 entry 1 line, 2 entries 2 lines,... */
  grid-gap: 0.5vw; /* first: grid-column-gap, second: grid-row-gap, or if equal write just 1 value*/

  color: white;

}

.view1_item {
  background-color: #eeeeee;
}

#view1_scatterplot {
}

#view1_histogram {
  // defines the elements range from line to line, so we can position the items anywhere we like in the grid.
  grid-area: 2 / 1 / 3 / 3; // grid-row-start - grid-column-start - grid-row-end -grid-column-end
  display: flex;
  align-items: center;
}

#view1_network_graph {
}



.range-slider {

  // Slider
  .input-range {
    width: 3em;
    border-radius: 5px;
    background: #ccc;
    outline: none;
    writing-mode: bt-lr; /* IE */
    -webkit-appearance: slider-vertical; /* WebKit */

  }
}

#eps-value {
  background-color: black;
  align-self: flex-start;
  /* top: 200px; */
  position: absolute;
  left: 1.3em;
  margin-top: 10px;
}




/*
CSS GRID CHEATSHEET
https://www.w3schools.com/css/css_grid.asp

************************************
***********************************
GRID WRAPPER POPERTIES
************************************
************************************


****************
display: grid;
****************
An HTML element becomes a grid container by setting the display property to grid or inline-grid.
All direct children of the grid container automatically becomes grid items.

*******************
grid-gap: 5px 10px;
*******************
defines the gap between the columns and the gap between the rows, shorthand property
first -> grid-column-gap, second -> grid-row-gap, or if equal write just 1 value

***************************************
grid-template-columns: auto auto auto;
****************************************
defines the number of columns in your grid layout, and it can define the width of each column.
e.g. every entry is a column, 3xvalue(here auto) is 3 columns

*******************************
grid-template-rows: 80px 200px;
********************************
defines the height of each row.

*******************************
justify-content: space-evenly;
*******************************
is used to align the whole grid inside the container.
The grid's total width has to be less than the container's width for the justify-content property to have any effect.
Params -> space-around, space-between, space-evenly, center, start, end

*****************************
align-content: center;
*****************************
is used to vertically align the whole grid inside the container.
The grid's total height has to be less than the container's height for the align-content property to have any effect.
Params -> space-around, space-between, space-evenly, center, start, end


***********************************
***********************************
GRID CHILD (ITEM) PROPERTIES
***********************************
***********************************


***************************
grid-area: 1 / 1 / 2 / 2;
****************************
defines the elements range from line to line, so we can position the items anywhere we like.
grid-row-start - grid-column-start - grid-row-end -grid-column-end

**********************************************
.item1 {
  grid-area: myArea;
}
.grid-container {
  grid-template-areas: 'myArea myArea . . .';
}
************************************************
The grid-area property can also be used to assign names to grid items.
Named grid items can be referred to by the grid-template-areas property of the grid container.

Let "myArea" span two columns in a five columns grid layout (period signs represent items with no name):


 */